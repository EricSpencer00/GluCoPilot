"""initial

Revision ID: 5dc2b235f622
Revises: 
Create Date: 2025-08-09 00:31:32.540553

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import Text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5dc2b235f622'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('is_active', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('dexcom_username', sa.String(), nullable=True),
    sa.Column('dexcom_password', sa.String(), nullable=True),
    sa.Column('dexcom_ous', sa.Boolean(), nullable=True),
    sa.Column('myfitnesspal_username', sa.String(), nullable=True),
    sa.Column('myfitnesspal_password', sa.String(), nullable=True),
    sa.Column('apple_health_authorized', sa.Boolean(), nullable=True),
    sa.Column('google_fit_authorized', sa.Boolean(), nullable=True),
    sa.Column('fitbit_authorized', sa.Boolean(), nullable=True),
    sa.Column('third_party_tokens', postgresql.JSON(astext_type=Text()), nullable=True),
    sa.Column('height_cm', sa.Float(), nullable=True),
    sa.Column('weight_kg', sa.Float(), nullable=True),
    sa.Column('birthdate', sa.DateTime(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('target_glucose_min', sa.Integer(), nullable=True),
    sa.Column('target_glucose_max', sa.Integer(), nullable=True),
    sa.Column('insulin_carb_ratio', sa.Integer(), nullable=True),
    sa.Column('insulin_sensitivity_factor', sa.Integer(), nullable=True),
    sa.Column('diabetes_type', sa.Integer(), nullable=True),
    sa.Column('diagnosis_date', sa.DateTime(), nullable=True),
    sa.Column('notification_preferences', postgresql.JSON(astext_type=Text()), nullable=True),
    sa.Column('privacy_preferences', postgresql.JSON(astext_type=Text()), nullable=True),
    sa.Column('ai_feedback', postgresql.JSON(astext_type=Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('activity_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('activity_type', sa.String(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('intensity', sa.String(), nullable=True),
    sa.Column('calories_burned', sa.Float(), nullable=True),
    sa.Column('steps', sa.Integer(), nullable=True),
    sa.Column('heart_rate_avg', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('meta_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_activity_logs_id'), 'activity_logs', ['id'], unique=False)
    op.create_table('analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_analyses_id'), 'analyses', ['id'], unique=False)
    op.create_table('food_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('meal_type', sa.String(), nullable=True),
    sa.Column('carbs', sa.Float(), nullable=True),
    sa.Column('protein', sa.Float(), nullable=True),
    sa.Column('fat', sa.Float(), nullable=True),
    sa.Column('fiber', sa.Float(), nullable=True),
    sa.Column('sugar', sa.Float(), nullable=True),
    sa.Column('glycemic_index', sa.Integer(), nullable=True),
    sa.Column('glycemic_load', sa.Float(), nullable=True),
    sa.Column('calories', sa.Float(), nullable=True),
    sa.Column('serving_size', sa.Float(), nullable=True),
    sa.Column('serving_unit', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('meta_data', postgresql.JSON(astext_type=Text()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_food_entries_id'), 'food_entries', ['id'], unique=False)
    op.create_table('glucose_readings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('quality', sa.String(), nullable=True),
    sa.Column('trend', sa.String(), nullable=True),
    sa.Column('trend_rate', sa.Float(), nullable=True),
    sa.Column('is_high_alert', sa.Boolean(), nullable=True),
    sa.Column('is_low_alert', sa.Boolean(), nullable=True),
    sa.Column('is_urgent_low', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_glucose_readings_id'), 'glucose_readings', ['id'], unique=False)
    op.create_table('health_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('data_type', sa.String(), nullable=True),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_health_data_id'), 'health_data', ['id'], unique=False)
    op.create_table('illness_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('severity', sa.Integer(), nullable=True),
    sa.Column('symptoms', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_illness_logs_id'), 'illness_logs', ['id'], unique=False)
    op.create_table('insulin_doses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('units', sa.Float(), nullable=True),
    sa.Column('insulin_type', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_insulin_doses_id'), 'insulin_doses', ['id'], unique=False)
    op.create_table('medication_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('dosage', sa.String(), nullable=True),
    sa.Column('units', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('taken', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_medication_logs_id'), 'medication_logs', ['id'], unique=False)
    op.create_table('menstrual_cycles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('cycle_length', sa.Integer(), nullable=True),
    sa.Column('period_length', sa.Integer(), nullable=True),
    sa.Column('symptoms', sa.String(), nullable=True),
    sa.Column('flow_level', sa.Integer(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_menstrual_cycles_id'), 'menstrual_cycles', ['id'], unique=False)
    op.create_table('mood_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('tags', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_mood_logs_id'), 'mood_logs', ['id'], unique=False)
    op.create_table('prediction_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('model_type', sa.String(), nullable=True),
    sa.Column('accuracy', sa.Float(), nullable=True),
    sa.Column('parameters', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_prediction_models_id'), 'prediction_models', ['id'], unique=False)
    op.create_table('recommendations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('recommendation_type', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('title', sa.String(length=128), nullable=True),
    sa.Column('category', sa.String(length=64), nullable=True),
    sa.Column('priority', sa.String(length=32), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('context_data', sa.Text(), nullable=True),
    sa.Column('is_helpful', sa.Boolean(), nullable=True),
    sa.Column('user_rating', sa.Integer(), nullable=True),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('is_implemented', sa.Boolean(), nullable=True),
    sa.Column('implementation_result', sa.Text(), nullable=True),
    sa.Column('suggested_time', sa.DateTime(), nullable=True),
    sa.Column('action_taken', sa.Boolean(), nullable=True),
    sa.Column('action_taken_time', sa.DateTime(), nullable=True),
    sa.Column('suggested_action', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recommendations_id'), 'recommendations', ['id'], unique=False)
    op.create_table('sleep_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('quality', sa.Integer(), nullable=True),
    sa.Column('deep_sleep_minutes', sa.Integer(), nullable=True),
    sa.Column('light_sleep_minutes', sa.Integer(), nullable=True),
    sa.Column('rem_sleep_minutes', sa.Integer(), nullable=True),
    sa.Column('awake_minutes', sa.Integer(), nullable=True),
    sa.Column('heart_rate_avg', sa.Integer(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('meta_data', postgresql.JSON(astext_type=Text()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sleep_logs_id'), 'sleep_logs', ['id'], unique=False)
    op.create_table('glucose_predictions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('prediction_time', sa.DateTime(), nullable=True),
    sa.Column('target_time', sa.DateTime(), nullable=True),
    sa.Column('predicted_value', sa.Float(), nullable=True),
    sa.Column('confidence_interval_lower', sa.Float(), nullable=True),
    sa.Column('confidence_interval_upper', sa.Float(), nullable=True),
    sa.Column('is_high_risk', sa.Boolean(), nullable=True),
    sa.Column('is_low_risk', sa.Boolean(), nullable=True),
    sa.Column('actual_value', sa.Float(), nullable=True),
    sa.Column('inputs', sa.Text(), nullable=True),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['prediction_models.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_glucose_predictions_id'), 'glucose_predictions', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_glucose_predictions_id'), table_name='glucose_predictions')
    op.drop_table('glucose_predictions')
    op.drop_index(op.f('ix_sleep_logs_id'), table_name='sleep_logs')
    op.drop_table('sleep_logs')
    op.drop_index(op.f('ix_recommendations_id'), table_name='recommendations')
    op.drop_table('recommendations')
    op.drop_index(op.f('ix_prediction_models_id'), table_name='prediction_models')
    op.drop_table('prediction_models')
    op.drop_index(op.f('ix_mood_logs_id'), table_name='mood_logs')
    op.drop_table('mood_logs')
    op.drop_index(op.f('ix_menstrual_cycles_id'), table_name='menstrual_cycles')
    op.drop_table('menstrual_cycles')
    op.drop_index(op.f('ix_medication_logs_id'), table_name='medication_logs')
    op.drop_table('medication_logs')
    op.drop_index(op.f('ix_insulin_doses_id'), table_name='insulin_doses')
    op.drop_table('insulin_doses')
    op.drop_index(op.f('ix_illness_logs_id'), table_name='illness_logs')
    op.drop_table('illness_logs')
    op.drop_index(op.f('ix_health_data_id'), table_name='health_data')
    op.drop_table('health_data')
    op.drop_index(op.f('ix_glucose_readings_id'), table_name='glucose_readings')
    op.drop_table('glucose_readings')
    op.drop_index(op.f('ix_food_entries_id'), table_name='food_entries')
    op.drop_table('food_entries')
    op.drop_index(op.f('ix_analyses_id'), table_name='analyses')
    op.drop_table('analyses')
    op.drop_index(op.f('ix_activity_logs_id'), table_name='activity_logs')
    op.drop_table('activity_logs')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
